apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-magma-container-images-from-git-source
  namespace: {{ $.Values.prowjob_namespace }}
spec:
  inputs:
    resources:
      - name: git-repository
        type: git
    params:
      - name: pathToContext
        description: The source code
        default: /workspace/git-repository/
        type: string
      - name: componentDirectory
        description: Directory of the component which will be built
        type: string
      - name: buildCommands
        description: Build commands
        default: "docker-compose build"
        type: string
      - name: createdContainers
        description: Containers created by build step
        type: string
      - name: cleanCommands
        description: Remove all containers created by build step
        default: "docker-compose down -v --rmi all --remove-orphans"
        type: string
  volumes:
    - name: docker-config
      secret:
        secretName: docker-config
        items:
          - key: .dockerconfigjson
            path: config.json
    - name: dockersock
      hostPath:
        path: /var/run/docker.sock
  steps:
    - name: build-magma-container-images
      image: mirantis/magma-ci
      env:
        - name: "DOCKER_CONFIG"
          value: "/tekton/home/.docker/"
      script: |
        #!/bin/sh -eux
        cd $(inputs.params.pathToContext)/$(inputs.params.componentDirectory)
        $(inputs.params.buildCommands)
        GIT_COMMIT="$(git rev-parse --short HEAD)"
        GIT_COMMIT_DATE="$(git log -1 --format=%cd --date=format:'%Y%m%d')"
        for IMAGE in $(inputs.params.createdContainers) ; do
          for TAG in latest ${GIT_COMMIT_DATE}-${GIT_COMMIT}; do
            docker tag "${IMAGE}" "{{ $.Values.acr_login_server }}/magma/${IMAGE}:${TAG}"
            docker push "{{ $.Values.acr_login_server }}/magma/${IMAGE}:${TAG}"
            docker rmi "{{ $.Values.acr_login_server }}/magma/${IMAGE}:${TAG}"
          done
        done
        $(inputs.params.cleanCommands)
      volumeMounts:
        - name: docker-config
          mountPath: /tekton/home/.docker/
        - name: dockersock
          mountPath: "/var/run/docker.sock"
---
apiVersion: tekton.dev/v1alpha1
kind: Pipeline
metadata:
  name: magma-pipeline
  namespace: {{ $.Values.prowjob_namespace }}
spec:
  resources:
    - name: git-repository
      type: git
  tasks:
    - name: build-nmp
      taskRef:
        name: build-magma-container-images-from-git-source
      params:
        - name: componentDirectory
          value: symphony/app/fbcnms-projects/magmalte
        - name: createdContainers
          value: "magmalte_magmalte"
      resources:
        inputs:
          - name: git-repository
            resource: git-repository
    - name: build-orc8r
      taskRef:
        name: build-magma-container-images-from-git-source
      params:
        - name: componentDirectory
          value: orc8r/cloud/docker
        - name: createdContainers
          value: "orc8r_proxy orc8r_controller"
        - name: buildCommands
          value: "./build.py --nocache"
        - name: cleanCommands
          value: |
            docker-compose down -v --rmi all --remove-orphans
            docker-compose -f docker-compose.cache.yml down -v --rmi all --remove-orphans
      resources:
        inputs:
          - name: git-repository
            resource: git-repository
    - name: build-feg
      taskRef:
        name: build-magma-container-images-from-git-source
      params:
        - name: componentDirectory
          value: feg/gateway/docker
        - name: createdContainers
          value: "feg_gateway_go feg_gateway_python"
      resources:
        inputs:
          - name: git-repository
            resource: git-repository
    - name: build-cfw
      taskRef:
        name: build-magma-container-images-from-git-source
      params:
        - name: componentDirectory
          value: cwf/gateway/docker
        - name: createdContainers
          value: "cwf_gateway_go cwf_gateway_python cwf_gateway_radius cwf_gateway_sessiond cwf_gateway_pipelined"
      resources:
        inputs:
          - name: git-repository
            resource: git-repository
